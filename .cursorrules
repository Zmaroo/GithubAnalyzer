# GitHub Code Analysis Tool - Development Rules

## Code Organization
- All core functionality goes in GithubAnalyzer/core/
- Services must inherit from BaseService
- Models should be dataclasses in GithubAnalyzer/core/models/
- Parsers should inherit from BaseParser
- Use type hints consistently

## Testing Requirements
- All new code must have corresponding tests
- Tests should be organized by component type (services, parsers, etc.)
- Integration tests must be in tests/test_services/test_service_integration*.py
- Use pytest fixtures for common test setups
- Test both success and error cases

## Error Handling
- All public methods should handle exceptions gracefully
- Use logging.error for failures, logging.warning for issues
- Return None/empty/false for failures rather than raising
- Document expected error cases

## Database Operations
- Use DatabaseService for all database operations
- Cache expensive operations when possible
- Handle connection failures gracefully
- Clean up resources properly

## Code Style
- Follow PEP 8
- Document all public APIs
- Use meaningful variable names
- Keep functions focused and small
- Add comments for complex logic

## Security
- Validate all file paths
- Sanitize database inputs
- Handle malicious/malformed input
- Respect file size limits
- Prevent injection attacks

## Performance
- Cache expensive operations
- Use batch operations when possible
- Monitor memory usage
- Support parallel processing where appropriate
