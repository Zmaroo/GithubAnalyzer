# Cursor rules for GitHub Analyzer project
version: 1.0

# Project structure
structure:
  core:
    - src/GithubAnalyzer/services/core/
    - src/GithubAnalyzer/models/core/
    - src/GithubAnalyzer/utils/
  analysis:
    - src/GithubAnalyzer/services/analysis/
    - src/GithubAnalyzer/models/analysis/
  storage:
    - src/GithubAnalyzer/models/storage/
  framework:
    - src/GithubAnalyzer/services/framework/

# File patterns to analyze
patterns:
  python:
    source: "src/GithubAnalyzer/**/*.py"
    tests: "tests/**/*.py"
  yaml: "**/*.{yml,yaml}"
  json: "**/*.json"
  markdown: "**/*.md"

# Service configuration
services:
  # Base requirements for all services
  base_requirements:
    - initialization
    - error_handling
    - logging
    - cleanup
    - config_validation
    - dependency_validation

  # Service initialization order and dependencies
  initialization_order:
    - database  # Core service
    - parser    # Core service
    - graph     # Analysis service, depends on database
    - analyzer  # Analysis service, depends on parser and graph
    - framework # Framework service, depends on analyzer

  # Service definitions with dependencies
  required_services:
    database:
      type: core
      dependencies: []
      config:
        require_ssl: true
        connection_pooling: true
      health_check:
        enabled: true
        interval: 300
        timeout: 30
    
    parser:
      type: core
      dependencies: []
      config:
        max_file_size: 1048576
        require_type_hints: true
    
    analyzer:
      type: analysis
      dependencies: 
        - parser
        - graph
      config:
        enable_security_checks: true
        enable_type_checking: true
    
    graph:
      type: analysis
      dependencies:
        - database
      config:
        check_gds_patterns: true
        validate_projections: true

    framework:
      type: framework
      dependencies:
        - analyzer
      config:
        enable_validation: true
        enable_caching: true

# Dependency injection configuration
dependency_injection:
  container:
    singleton: true
    components:
      - service_registry
      - configuration_manager
    validation:
      check_circular_dependencies: true
      validate_config: true

  configuration:
    sources:
      - settings
      - environment
      - cursorrules
    merge_strategy: override

# Model requirements
models:
  base_requirements:
    - validation
    - serialization
    - error_handling
  
  types:
    core:
      - repository
      - module
    analysis:
      - code
      - relationships
    storage:
      - database
      - graph

# Testing requirements  
testing:
  min_coverage:
    total: 80
    services: 90
    models: 85
    critical_paths: 95
  required_test_types:
    - unit
    - integration
    - security
    - performance
  test_patterns:
    unit: "test_*.py"
    integration: "test_*_integration.py"
  required_test_cases:
    services:
      - initialization
      - error_handling
      - cleanup
      - configuration
    database:
      - connection
      - transactions
      - caching
    graph:
      - projections
      - algorithms
      - error_cases

# Quality requirements
quality:
  complexity:
    max_cognitive: 15
    max_cyclomatic: 10
    max_maintainability_index: 20
  size:
    max_method_lines: 50
    max_class_lines: 500
    max_file_lines: 1000
  naming_conventions:
    classes: "^[A-Z][a-zA-Z0-9]*$"
    functions: "^[a-z][a-zA-Z0-9_]*$"
    variables: "^[a-z][a-zA-Z0-9_]*$"
  documentation:
    require_module_docs: true
    require_class_docs: true
    require_method_docs: true
    docstring_style: "google"
