"""Type stubs for neo4j package"""

from typing import Any, Dict, Generic, Optional, Protocol, TypeVar

T = TypeVar("T")

class Driver:
    def session(self) -> "Session": ...
    def close(self) -> None: ...

class Session:
    def run(
        self, query: str, parameters: Optional[Dict[str, Any]] = None
    ) -> "Result": ...
    def close(self) -> None: ...
    def begin_transaction(self) -> "Transaction": ...

class Result:
    def single(self) -> "Record": ...
    def consume(self) -> "ResultSummary": ...
    def data(self) -> Dict[str, Any]: ...

class Record:
    def __getitem__(self, key: str) -> Any: ...
    def get(self, key: str, default: Any = None) -> Any: ...

class Transaction:
    def run(
        self, query: str, parameters: Optional[Dict[str, Any]] = None
    ) -> Result: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...

class ResultSummary:
    counters: "Counters"

class Counters:
    nodes_created: int
    relationships_created: int
