{
  "language": "erlang",
  "pattern": "\n            [\n              (fun_decl)\n              (anonymous_fun)\n              (fun_clause)\n              (function_clause)\n            ] @function\n        ",
  "total_functions": 30,
  "functions": [
    {
      "type": "fun_decl",
      "start_point": {
        "row": 12,
        "column": 0
      },
      "end_point": {
        "row": 13,
        "column": 34
      },
      "code": "create_user(Name, Age) when is_list(Name), is_integer(Age), Age >= 0 ->\n    #user{name = Name, age = Age}.",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 12,
        "column": 0
      },
      "end_point": {
        "row": 13,
        "column": 33
      },
      "code": "create_user(Name, Age) when is_list(Name), is_integer(Age), Age >= 0 ->\n    #user{name = Name, age = Age}",
      "name": "create_user"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 17,
        "column": 0
      },
      "end_point": {
        "row": 19,
        "column": 40
      },
      "code": "process_user(#user{name = Name, age = Age}) when Age >= 18 ->\n    io:format(\"Processing adult user: ~s~n\", [Name]),\n    {ok, #user{name = Name, age = Age}};",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 17,
        "column": 0
      },
      "end_point": {
        "row": 19,
        "column": 39
      },
      "code": "process_user(#user{name = Name, age = Age}) when Age >= 18 ->\n    io:format(\"Processing adult user: ~s~n\", [Name]),\n    {ok, #user{name = Name, age = Age}}",
      "name": "process_user"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 20,
        "column": 0
      },
      "end_point": {
        "row": 22,
        "column": 22
      },
      "code": "process_user(#user{name = Name}) ->\n    io:format(\"Processing minor user: ~s~n\", [Name]),\n    {error, underage}.",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 20,
        "column": 0
      },
      "end_point": {
        "row": 22,
        "column": 21
      },
      "code": "process_user(#user{name = Name}) ->\n    io:format(\"Processing minor user: ~s~n\", [Name]),\n    {error, underage}",
      "name": "process_user"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 26,
        "column": 0
      },
      "end_point": {
        "row": 27,
        "column": 42
      },
      "code": "handle_users(Users) ->\n    [process_user(User) || User <- Users].",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 26,
        "column": 0
      },
      "end_point": {
        "row": 27,
        "column": 41
      },
      "code": "handle_users(Users) ->\n    [process_user(User) || User <- Users]",
      "name": "handle_users"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 30,
        "column": 0
      },
      "end_point": {
        "row": 34,
        "column": 8
      },
      "code": "validate_age(Age) ->\n    case Age of\n        A when is_integer(A), A >= 0 -> {ok, A};\n        _ -> {error, invalid_age}\n    end.",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 30,
        "column": 0
      },
      "end_point": {
        "row": 34,
        "column": 7
      },
      "code": "validate_age(Age) ->\n    case Age of\n        A when is_integer(A), A >= 0 -> {ok, A};\n        _ -> {error, invalid_age}\n    end",
      "name": "validate_age"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 37,
        "column": 0
      },
      "end_point": {
        "row": 38,
        "column": 67
      },
      "code": "format_user(#user{name = Name, age = Age}) ->\n    lists:flatten(io_lib:format(\"~s (~p years old)\", [Name, Age])).",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 37,
        "column": 0
      },
      "end_point": {
        "row": 38,
        "column": 66
      },
      "code": "format_user(#user{name = Name, age = Age}) ->\n    lists:flatten(io_lib:format(\"~s (~p years old)\", [Name, Age]))",
      "name": "format_user"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 41,
        "column": 0
      },
      "end_point": {
        "row": 47,
        "column": 8
      },
      "code": "safe_process_user(User) ->\n    try process_user(User) of\n        Result -> Result\n    catch\n        error:Error -> {error, Error};\n        _:_ -> {error, unknown_error}\n    end.",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 41,
        "column": 0
      },
      "end_point": {
        "row": 47,
        "column": 7
      },
      "code": "safe_process_user(User) ->\n    try process_user(User) of\n        Result -> Result\n    catch\n        error:Error -> {error, Error};\n        _:_ -> {error, unknown_error}\n    end",
      "name": "safe_process_user"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 50,
        "column": 0
      },
      "end_point": {
        "row": 51,
        "column": 62
      },
      "code": "process_names(Names) ->\n    lists:map(fun(Name) -> string:uppercase(Name) end, Names).",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 50,
        "column": 0
      },
      "end_point": {
        "row": 51,
        "column": 61
      },
      "code": "process_names(Names) ->\n    lists:map(fun(Name) -> string:uppercase(Name) end, Names)",
      "name": "process_names"
    },
    {
      "type": "anonymous_fun",
      "start_point": {
        "row": 51,
        "column": 14
      },
      "end_point": {
        "row": 51,
        "column": 53
      },
      "code": "fun(Name) -> string:uppercase(Name) end",
      "name": "Anonymous"
    },
    {
      "type": "fun_clause",
      "start_point": {
        "row": 51,
        "column": 17
      },
      "end_point": {
        "row": 51,
        "column": 49
      },
      "code": "(Name) -> string:uppercase(Name)",
      "name": "Anonymous"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 54,
        "column": 0
      },
      "end_point": {
        "row": 55,
        "column": 53
      },
      "code": "create_greeter(Greeting) ->\n    fun(Name) -> Greeting ++ \", \" ++ Name ++ \"!\" end.",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 54,
        "column": 0
      },
      "end_point": {
        "row": 55,
        "column": 52
      },
      "code": "create_greeter(Greeting) ->\n    fun(Name) -> Greeting ++ \", \" ++ Name ++ \"!\" end",
      "name": "create_greeter"
    },
    {
      "type": "anonymous_fun",
      "start_point": {
        "row": 55,
        "column": 4
      },
      "end_point": {
        "row": 55,
        "column": 52
      },
      "code": "fun(Name) -> Greeting ++ \", \" ++ Name ++ \"!\" end",
      "name": "Anonymous"
    },
    {
      "type": "fun_clause",
      "start_point": {
        "row": 55,
        "column": 7
      },
      "end_point": {
        "row": 55,
        "column": 48
      },
      "code": "(Name) -> Greeting ++ \", \" ++ Name ++ \"!\"",
      "name": "Anonymous"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 58,
        "column": 0
      },
      "end_point": {
        "row": 59,
        "column": 46
      },
      "code": "start_user_processor() ->\n    spawn(fun() -> user_processor_loop() end).",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 58,
        "column": 0
      },
      "end_point": {
        "row": 59,
        "column": 45
      },
      "code": "start_user_processor() ->\n    spawn(fun() -> user_processor_loop() end)",
      "name": "start_user_processor"
    },
    {
      "type": "anonymous_fun",
      "start_point": {
        "row": 59,
        "column": 10
      },
      "end_point": {
        "row": 59,
        "column": 44
      },
      "code": "fun() -> user_processor_loop() end",
      "name": "Anonymous"
    },
    {
      "type": "fun_clause",
      "start_point": {
        "row": 59,
        "column": 13
      },
      "end_point": {
        "row": 59,
        "column": 40
      },
      "code": "() -> user_processor_loop()",
      "name": "Anonymous"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 61,
        "column": 0
      },
      "end_point": {
        "row": 68,
        "column": 8
      },
      "code": "user_processor_loop() ->\n    receive\n        {process, User} ->\n            process_user(User),\n            user_processor_loop();\n        stop ->\n            ok\n    end.",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 61,
        "column": 0
      },
      "end_point": {
        "row": 68,
        "column": 7
      },
      "code": "user_processor_loop() ->\n    receive\n        {process, User} ->\n            process_user(User),\n            user_processor_loop();\n        stop ->\n            ok\n    end",
      "name": "user_processor_loop"
    },
    {
      "type": "fun_decl",
      "start_point": {
        "row": 71,
        "column": 0
      },
      "end_point": {
        "row": 100,
        "column": 7
      },
      "code": "start() ->\n    % Create some users\n    User1 = create_user(\"John\", 25),\n    User2 = create_user(\"Alice\", 17),\n    \n    % Process individual users\n    process_user(User1),\n    process_user(User2),\n    \n    % Process list of users\n    Users = [User1, User2],\n    Results = handle_users(Users),\n    io:format(\"Processing results: ~p~n\", [Results]),\n    \n    % Try higher-order functions\n    Names = [\"bob\", \"alice\", \"charlie\"],\n    UpperNames = process_names(Names),\n    io:format(\"Uppercase names: ~p~n\", [UpperNames]),\n    \n    % Try function generator\n    Greeter = create_greeter(\"Hello\"),\n    Greeting = Greeter(\"Dave\"),\n    io:format(\"~s~n\", [Greeting]),\n    \n    % Try message passing\n    Pid = start_user_processor(),\n    Pid ! {process, User1},\n    Pid ! stop,\n    \n    ok.",
      "name": "Anonymous"
    },
    {
      "type": "function_clause",
      "start_point": {
        "row": 71,
        "column": 0
      },
      "end_point": {
        "row": 100,
        "column": 6
      },
      "code": "start() ->\n    % Create some users\n    User1 = create_user(\"John\", 25),\n    User2 = create_user(\"Alice\", 17),\n    \n    % Process individual users\n    process_user(User1),\n    process_user(User2),\n    \n    % Process list of users\n    Users = [User1, User2],\n    Results = handle_users(Users),\n    io:format(\"Processing results: ~p~n\", [Results]),\n    \n    % Try higher-order functions\n    Names = [\"bob\", \"alice\", \"charlie\"],\n    UpperNames = process_names(Names),\n    io:format(\"Uppercase names: ~p~n\", [UpperNames]),\n    \n    % Try function generator\n    Greeter = create_greeter(\"Hello\"),\n    Greeting = Greeter(\"Dave\"),\n    io:format(\"~s~n\", [Greeting]),\n    \n    % Try message passing\n    Pid = start_user_processor(),\n    Pid ! {process, User1},\n    Pid ! stop,\n    \n    ok",
      "name": "start"
    }
  ]
}