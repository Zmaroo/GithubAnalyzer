[
  {
    "function": [
      "public addUser(user: User): void {\n        this.users.push(user);\n    }"
    ]
  },
  {
    "function": [
      "(data: User[]): User[] => {\n        return data.map((user: User) => {\n            return { ...user, id: user.id + 1 };\n        });\n    }"
    ]
  },
  {
    "function": [
      "(user: User) => {\n            return { ...user, id: user.id + 1 };\n        }"
    ]
  },
  {
    "function": [
      "function(user: User): User {\n        return { ...user, name: user.name.toUpperCase() };\n    }"
    ]
  },
  {
    "function": [
      "function regularFunction(): string {\n    return \"Hello\";\n}"
    ]
  },
  {
    "function": [
      "(name: string): string => {\n    return `Hello ${name}`;\n}"
    ]
  },
  {
    "function": [
      "async function asyncFunction(): Promise<string> {\n    return \"async result\";\n}"
    ]
  },
  {
    "function": [
      "function genericFunction<T>(arg: T): T {\n    return arg;\n}"
    ]
  },
  {
    "function": [
      "function optionalParams(required: string, optional?: number): string {\n    return `${required} ${optional || ''}`;\n}"
    ]
  },
  {
    "function": [
      "function restParams(...numbers: number[]): number {\n    return numbers.reduce((a, b) => a + b, 0);\n}"
    ]
  },
  {
    "function": [
      "(a, b) => a + b"
    ]
  },
  {
    "function": [
      "constructor() {\n        this.value = 42;\n    }"
    ]
  },
  {
    "function": [
      "public instanceMethod(): number {\n        return this.value;\n    }"
    ]
  },
  {
    "function": [
      "private privateMethod(): void {\n        console.log(\"private\");\n    }"
    ]
  },
  {
    "function": [
      "static staticMethod(): string {\n        return \"static\";\n    }"
    ]
  },
  {
    "function": [
      "get valueGetter(): number {\n        return this.value;\n    }"
    ]
  },
  {
    "function": [
      "set valueSetter(v: number) {\n        this.value = v;\n    }"
    ]
  },
  {
    "function": [
      "async asyncMethod(): Promise<number> {\n        return this.value;\n    }"
    ]
  },
  {
    "function": [
      "concreteMethod(): string {\n        return \"concrete\";\n    }"
    ]
  },
  {
    "function": [
      "(x) => x * 2"
    ]
  },
  {
    "function": [
      "function overloaded(x: any): any {\n    return x;\n}"
    ]
  }
]