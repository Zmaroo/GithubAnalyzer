[
  {
    "function": [
      "(define (create-user name age)\n  (cond\n    [(< age 0) (error 'create-user \"Age cannot be negative\")]\n    [(> age 150) (error 'create-user \"Age cannot be greater than 150\")]\n    [else (user name age)]))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (process-user u)\n  (match u\n    [(user _ age) #:when (< age 0) \"Invalid age\"]\n    [(user _ age) #:when (< age 18) \"Underage\"]\n    [(user name _) (format \"Processing adult user: ~a\" name)]))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (create-greeting name [prefix \"Hello\"])\n  (format \"~a, ~a!\" prefix name))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (process-users users proc)\n  (map proc users))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (make-age-checker min-age)\n  (\u03bb (u)\n    (>= (user-age u) min-age)))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(\u03bb (u)\n    (>= (user-age u) min-age))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(define (find-user users name)\n  (cond\n    [(null? users) #f]\n    [(string=? (user-name (car users)) name) (car users)]\n    [else (find-user (cdr users) name)]))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (get-adult-users users)\n  (for/list ([u users]\n             #:when (>= (user-age u) 18))\n    u))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (get-user-stats users)\n  (let ([total (length users)]\n        [adults (length (get-adult-users users))])\n    (values total adults)))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (format-user u)\n  (format \"~a (~a years old)\" (user-name u) (user-age u)))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (create-user-registry)\n  (make-hash))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (add-user-to-registry registry u)\n  (hash-set! registry (user-name u) u))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (get-user-from-registry registry name)\n  (hash-ref registry name #f))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (validate-user u)\n  (with-handlers ([exn:fail? (\u03bb (e) (exn-message e))])\n    (cond\n      [(string=? (user-name u) \"\") (error 'validate-user \"Name cannot be empty\")]\n      [(< (user-age u) 0) (error 'validate-user \"Age cannot be negative\")]\n      [else #t])))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(\u03bb (e) (exn-message e))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(define (user-stream users)\n  (stream-cons\n   (car users)\n   (if (null? (cdr users))\n       empty-stream\n       (user-stream (cdr users)))))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (process-user/cc u success failure)\n  (if (>= (user-age u) 18)\n      (success (format \"Adult user: ~a\" (user-name u)))\n      (failure (format \"Minor user: ~a\" (user-name u)))))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define (main)\n  (printf \"Creating users...\\n\")\n  (define users\n    (list (create-user \"John\" 25)\n          (create-user \"Alice\" 17)))\n  \n  ;; Test basic functions\n  (printf \"\\nUsers:\\n\")\n  (for-each (\u03bb (u) (printf \"~a\\n\" (format-user u))) users)\n  \n  ;; Test processing\n  (printf \"\\nProcessing results:\\n\")\n  (for-each (\u03bb (result) (printf \"~a\\n\" result))\n            (process-users users process-user))\n  \n  ;; Test user stats\n  (printf \"\\nUser statistics:\\n\")\n  (let-values ([(total adults) (get-user-stats users)])\n    (printf \"Total users: ~a\\n\" total)\n    (printf \"Adult users: ~a\\n\" adults))\n  \n  ;; Test user finding\n  (printf \"\\nFinding user:\\n\")\n  (let ([found (find-user users \"John\")])\n    (when found\n      (printf \"Found: ~a\\n\" (format-user found))))\n  \n  ;; Test registry\n  (printf \"\\nTesting registry:\\n\")\n  (define registry (create-user-registry))\n  (for-each (\u03bb (u) (add-user-to-registry registry u)) users)\n  (let ([found (get-user-from-registry registry \"John\")])\n    (when found\n      (printf \"Found in registry: ~a\\n\" (format-user found))))\n  \n  ;; Test streams\n  (printf \"\\nTesting streams:\\n\")\n  (let ([s (user-stream users)])\n    (stream-for-each\n     (\u03bb (u) (printf \"Stream user: ~a\\n\" (format-user u)))\n     s))\n  \n  ;; Test continuations\n  (printf \"\\nTesting continuations:\\n\")\n  (for-each\n   (\u03bb (u)\n     (process-user/cc\n      u\n      (\u03bb (success) (printf \"Success: ~a\\n\" success))\n      (\u03bb (failure) (printf \"Failure: ~a\\n\" failure))))\n   users)\n  \n  ;; Test macro\n  (printf \"\\nTesting macro:\\n\")\n  (with-user \"Bob\" 30\n    (printf \"Created user: ~a\\n\" (format-user u)))\n  \n  ;; Test validation\n  (printf \"\\nTesting validation:\\n\")\n  (for-each\n   (\u03bb (u)\n     (let ([result (validate-user u)])\n       (printf \"Validation result for ~a: ~a\\n\"\n               (user-name u)\n               (if (eq? result #t) \"valid\" result))))\n   users))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(define users\n    (list (create-user \"John\" 25)\n          (create-user \"Alice\" 17)))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(\u03bb (u) (printf \"~a\\n\" (format-user u)))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(\u03bb (result) (printf \"~a\\n\" result))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(define registry (create-user-registry))"
    ],
    "def_type": [
      "define"
    ]
  },
  {
    "function": [
      "(\u03bb (u) (add-user-to-registry registry u))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(\u03bb (u) (printf \"Stream user: ~a\\n\" (format-user u)))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(\u03bb (u)\n     (process-user/cc\n      u\n      (\u03bb (success) (printf \"Success: ~a\\n\" success))\n      (\u03bb (failure) (printf \"Failure: ~a\\n\" failure))))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(\u03bb (success) (printf \"Success: ~a\\n\" success))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(\u03bb (failure) (printf \"Failure: ~a\\n\" failure))"
    ],
    "def_type": [
      "\u03bb"
    ]
  },
  {
    "function": [
      "(\u03bb (u)\n     (let ([result (validate-user u)])\n       (printf \"Validation result for ~a: ~a\\n\"\n               (user-name u)\n               (if (eq? result #t) \"valid\" result))))"
    ],
    "def_type": [
      "\u03bb"
    ]
  }
]