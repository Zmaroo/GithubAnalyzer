{
  "language": "commonlisp",
  "pattern": "\n            [\n              (defun)\n              (defun_header)\n              (defun_keyword)\n            ] @function\n        ",
  "total_functions": 42,
  "functions": [
    {
      "type": "defun",
      "start_point": {
        "row": 22,
        "column": 0
      },
      "end_point": {
        "row": 23,
        "column": 44
      },
      "code": "(defun make-user (name age)\n  (make-instance 'user :name name :age age))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 22,
        "column": 1
      },
      "end_point": {
        "row": 22,
        "column": 27
      },
      "code": "defun make-user (name age)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 22,
        "column": 1
      },
      "end_point": {
        "row": 22,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 26,
        "column": 0
      },
      "end_point": {
        "row": 27,
        "column": 55
      },
      "code": "(defgeneric process-user (user)\n  (:documentation \"Process a user based on their age\"))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 26,
        "column": 1
      },
      "end_point": {
        "row": 26,
        "column": 31
      },
      "code": "defgeneric process-user (user)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 26,
        "column": 1
      },
      "end_point": {
        "row": 26,
        "column": 11
      },
      "code": "defgeneric",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 30,
        "column": 0
      },
      "end_point": {
        "row": 35,
        "column": 31
      },
      "code": "(defmethod process-user ((user user))\n  (with-slots (name age) user\n    (cond\n      ((< age 0) (error \"Invalid age\"))\n      ((< age 18) (values nil \"Underage\"))\n      (t (values t \"Adult\")))))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 30,
        "column": 1
      },
      "end_point": {
        "row": 30,
        "column": 37
      },
      "code": "defmethod process-user ((user user))",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 30,
        "column": 1
      },
      "end_point": {
        "row": 30,
        "column": 10
      },
      "code": "defmethod",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 38,
        "column": 0
      },
      "end_point": {
        "row": 39,
        "column": 37
      },
      "code": "(defun create-greeting (name &optional (prefix \"Hello\"))\n  (format nil \"~A, ~A!\" prefix name))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 38,
        "column": 1
      },
      "end_point": {
        "row": 38,
        "column": 56
      },
      "code": "defun create-greeting (name &optional (prefix \"Hello\"))",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 38,
        "column": 1
      },
      "end_point": {
        "row": 38,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 42,
        "column": 0
      },
      "end_point": {
        "row": 46,
        "column": 42
      },
      "code": "(defun format-user (user &key (verbose nil))\n  (with-slots (name age) user\n    (if verbose\n        (format nil \"User ~A is ~D years old\" name age)\n        (format nil \"~A (~D)\" name age))))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 42,
        "column": 1
      },
      "end_point": {
        "row": 42,
        "column": 44
      },
      "code": "defun format-user (user &key (verbose nil))",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 42,
        "column": 1
      },
      "end_point": {
        "row": 42,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 49,
        "column": 0
      },
      "end_point": {
        "row": 50,
        "column": 27
      },
      "code": "(defun process-users (users processor)\n  (mapcar processor users))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 49,
        "column": 1
      },
      "end_point": {
        "row": 49,
        "column": 38
      },
      "code": "defun process-users (users processor)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 49,
        "column": 1
      },
      "end_point": {
        "row": 49,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 53,
        "column": 0
      },
      "end_point": {
        "row": 55,
        "column": 34
      },
      "code": "(defun make-age-checker (min-age)\n  (lambda (user)\n    (>= (user-age user) min-age)))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 53,
        "column": 1
      },
      "end_point": {
        "row": 53,
        "column": 33
      },
      "code": "defun make-age-checker (min-age)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 53,
        "column": 1
      },
      "end_point": {
        "row": 53,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 54,
        "column": 2
      },
      "end_point": {
        "row": 55,
        "column": 33
      },
      "code": "(lambda (user)\n    (>= (user-age user) min-age))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 54,
        "column": 3
      },
      "end_point": {
        "row": 54,
        "column": 16
      },
      "code": "lambda (user)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 54,
        "column": 3
      },
      "end_point": {
        "row": 54,
        "column": 9
      },
      "code": "lambda",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 58,
        "column": 0
      },
      "end_point": {
        "row": 62,
        "column": 38
      },
      "code": "(defun find-user (name users)\n  (cond\n    ((null users) nil)\n    ((string= name (user-name (car users))) (car users))\n    (t (find-user name (cdr users)))))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 58,
        "column": 1
      },
      "end_point": {
        "row": 58,
        "column": 29
      },
      "code": "defun find-user (name users)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 58,
        "column": 1
      },
      "end_point": {
        "row": 58,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 65,
        "column": 0
      },
      "end_point": {
        "row": 67,
        "column": 13
      },
      "code": "(defmacro with-user ((var name age) &body body)\n  `(let ((,var (make-user ,name ,age)))\n     ,@body))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 65,
        "column": 1
      },
      "end_point": {
        "row": 65,
        "column": 47
      },
      "code": "defmacro with-user ((var name age) &body body)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 65,
        "column": 1
      },
      "end_point": {
        "row": 65,
        "column": 9
      },
      "code": "defmacro",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 70,
        "column": 0
      },
      "end_point": {
        "row": 75,
        "column": 50
      },
      "code": "(defun analyze-user (user)\n  (multiple-value-bind (valid message)\n      (process-user user)\n    (if valid\n        (format nil \"Valid user: ~A\" message)\n        (format nil \"Invalid user: ~A\" message))))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 70,
        "column": 1
      },
      "end_point": {
        "row": 70,
        "column": 26
      },
      "code": "defun analyze-user (user)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 70,
        "column": 1
      },
      "end_point": {
        "row": 70,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 78,
        "column": 0
      },
      "end_point": {
        "row": 79,
        "column": 46
      },
      "code": "(defun get-adult-users (users)\n  (remove-if-not (make-age-checker 18) users))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 78,
        "column": 1
      },
      "end_point": {
        "row": 78,
        "column": 30
      },
      "code": "defun get-adult-users (users)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 78,
        "column": 1
      },
      "end_point": {
        "row": 78,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 83,
        "column": 0
      },
      "end_point": {
        "row": 85,
        "column": 35
      },
      "code": "(defun get-uppercase-name (user)\n  (declare (type user user))\n  (string-upcase (user-name user)))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 83,
        "column": 1
      },
      "end_point": {
        "row": 83,
        "column": 32
      },
      "code": "defun get-uppercase-name (user)",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 83,
        "column": 1
      },
      "end_point": {
        "row": 83,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    },
    {
      "type": "defun",
      "start_point": {
        "row": 88,
        "column": 0
      },
      "end_point": {
        "row": 122,
        "column": 41
      },
      "code": "(defun run-examples ()\n  ;; Create test users\n  (let* ((user1 (make-user \"John\" 25))\n         (user2 (make-user \"Alice\" 17))\n         (users (list user1 user2)))\n    \n    ;; Test basic functions\n    (format t \"User 1: ~A~%\" (format-user user1))\n    (format t \"User 2: ~A~%\" (format-user user2))\n    \n    ;; Test processing\n    (format t \"Processing results:~%\")\n    (dolist (user users)\n      (format t \"~A: ~A~%\" \n              (user-name user)\n              (analyze-user user)))\n    \n    ;; Test higher-order functions\n    (format t \"Adult users:~%\")\n    (dolist (user (get-adult-users users))\n      (format t \"~A~%\" (format-user user)))\n    \n    ;; Test macro\n    (with-user (test-user \"Bob\" 30)\n      (format t \"Created test user: ~A~%\" \n              (format-user test-user)))\n    \n    ;; Test closure\n    (let ((is-adult (make-age-checker 18)))\n      (format t \"Is user1 adult? ~A~%\" \n              (if (funcall is-adult user1) \"Yes\" \"No\")))\n    \n    ;; Test type-declared function\n    (format t \"Uppercase name: ~A~%\" \n            (get-uppercase-name user1))))",
      "name": "Anonymous"
    },
    {
      "type": "defun_header",
      "start_point": {
        "row": 88,
        "column": 1
      },
      "end_point": {
        "row": 88,
        "column": 22
      },
      "code": "defun run-examples ()",
      "name": "Anonymous"
    },
    {
      "type": "defun_keyword",
      "start_point": {
        "row": 88,
        "column": 1
      },
      "end_point": {
        "row": 88,
        "column": 6
      },
      "code": "defun",
      "name": "Anonymous"
    }
  ]
}