[
  {
    "function": [
      "process (User { age })\n    | age < 0 = Left \"Invalid age\"\n    | age < 18 = Left \"Underage\"\n    | otherwise = Right \"Adult user\""
    ]
  },
  {
    "function": [
      "getName (User { name }) = name"
    ]
  },
  {
    "function": [
      "getAge (User { age }) = age"
    ]
  },
  {
    "function": [
      "createUser name age\n  | age < 0 = Nothing\n  | otherwise = Just $ User { name, age }"
    ]
  },
  {
    "function": [
      "formatUser user = case process user of\n  Left err -> \"Error: \" <> err\n  Right msg -> \"Success: \" <> msg\n\n-- Higher-order function"
    ]
  },
  {
    "function": [
      "processUsers = map formatUser"
    ]
  },
  {
    "function": [
      "getUppercaseName = getName >>> toUpper\n  where\n    toUpper :: String -> String\n    toUpper str = str -- Placeholder: PureScript doesn't have a built-in toUpper\n\n-- Monadic function"
    ]
  },
  {
    "function": [
      "toUpper str = str"
    ]
  },
  {
    "function": [
      "validateUser user = do\n  log $ \"Validating user: \" <> getName user\n  log $ formatUser user\n\n-- Function with pattern matching"
    ]
  },
  {
    "function": [
      "describeAge age\n  | age < 0 = \"Invalid age\"\n  | age < 18 = \"Minor\"\n  | age < 65 = \"Adult\"\n  | otherwise = \"Senior\""
    ]
  },
  {
    "function": [
      "findUser users name = \n  users # filter (\\user -> getName user == name) # head\n  where\n    head [] = Nothing\n    head (x:_) = Just x\n\n-- Function with type class constraints"
    ]
  },
  {
    "function": [
      "\\user -> getName user == name"
    ]
  },
  {
    "function": [
      "head [] = Nothing"
    ]
  },
  {
    "function": [
      "head (x:_) = Just x"
    ]
  },
  {
    "function": [
      "countAdults users = \n  users \n    # filter isAdult\n    # length\n  where\n    isAdult user = case process user of\n      Right \"Adult user\" -> true\n      _ -> false\n\n-- Main program"
    ]
  },
  {
    "function": [
      "isAdult user = case process user of\n      Right \"Adult user\" -> true\n      _ -> false\n\n-- Main program"
    ]
  },
  {
    "function": [
      "main = do\n  -- Create users\n  let user1 = createUser \"John\" 25\n      user2 = createUser \"Alice\" 17\n      users = [user1, user2] # catMaybes\n  \n  -- Test basic functions\n  log \"Users:\"\n  for_ users \\user -> do\n    log $ getName user <> \" (\" <> show (getAge user) <> \")\"\n  \n  -- Test processing\n  log \"\\nProcessing results:\"\n  for_ (processUsers users) \\result -> do\n    log result\n  \n  -- Test validation\n  log \"\\nValidation:\"\n  for_ users validateUser\n  \n  -- Test age description\n  log \"\\nAge descriptions:\"\n  for_ users \\user -> do\n    log $ getName user <> \": \" <> describeAge (getAge user)\n  \n  -- Test user finding\n  log \"\\nFinding user:\"\n  case findUser users \"John\" of\n    Just user -> log $ \"Found: \" <> getName user\n    Nothing -> log \"User not found\"\n  \n  -- Test adult counting\n  log \"\\nStatistics:\"\n  log $ \"Adult count: \" <> show (countAdults users)\n\n-- Helper functions"
    ]
  },
  {
    "function": [
      "user1 = createUser \"John\" 25"
    ]
  },
  {
    "function": [
      "user2 = createUser \"Alice\" 17"
    ]
  },
  {
    "function": [
      "users = [user1, user2] # catMaybes"
    ]
  },
  {
    "function": [
      "\\user -> do\n    log $ getName user <> \" (\" <> show (getAge user) <> \")\"\n  \n  -- Test processing"
    ]
  },
  {
    "function": [
      "\\result -> do\n    log result\n  \n  -- Test validation"
    ]
  },
  {
    "function": [
      "\\user -> do\n    log $ getName user <> \": \" <> describeAge (getAge user)\n  \n  -- Test user finding"
    ]
  },
  {
    "function": [
      "catMaybes arr = arr # filter isJust # map fromJust\n  where\n    isJust (Just _) = true\n    isJust Nothing = false\n    fromJust (Just x) = x\n    fromJust Nothing = unsafeCrashWith \"Impossible: fromJust Nothing\""
    ]
  },
  {
    "function": [
      "isJust (Just _) = true"
    ]
  },
  {
    "function": [
      "isJust Nothing = false"
    ]
  },
  {
    "function": [
      "fromJust (Just x) = x"
    ]
  },
  {
    "function": [
      "fromJust Nothing = unsafeCrashWith \"Impossible: fromJust Nothing\""
    ]
  },
  {
    "function": [
      "for_ = flip traverse_"
    ]
  }
]