[
  {
    "function": [
      "public function process(): ProcessResult;"
    ]
  },
  {
    "function": [
      "public function __construct(string $name, int $age) {\n        $this->name = $name;\n        $this->age = $age;\n    }"
    ]
  },
  {
    "function": [
      "public function getName(): string {\n        return $this->name;\n    }"
    ]
  },
  {
    "function": [
      "public function getAge(): int {\n        return $this->age;\n    }"
    ]
  },
  {
    "function": [
      "public function process(): ProcessResult {\n        return shape(\n            'success' => $this->age >= 18,\n            'message' => $this->age >= 18 ? 'Adult user' : 'Minor user'\n        );\n    }"
    ]
  },
  {
    "function": [
      "public function format(bool $verbose = false): string {\n        return $verbose\n            ? sprintf(\"%s is %d years old\", $this->name, $this->age)\n            : sprintf(\"%s (%d)\", $this->name, $this->age);\n    }"
    ]
  },
  {
    "function": [
      "public function __construct() {\n        $this->users = new Vector();\n    }"
    ]
  },
  {
    "function": [
      "public function add(T $user): void {\n        $this->users->add($user);\n    }"
    ]
  },
  {
    "function": [
      "public function getUsers(): Vector<T> {\n        return $this->users;\n    }"
    ]
  },
  {
    "function": [
      "function processUsers<T as User>(Vector<T> $users): Vector<ProcessResult> {\n    return $users->map($user ==> $user->process());\n}"
    ]
  },
  {
    "function": [
      "$user ==> $user->process()"
    ]
  },
  {
    "function": [
      "function findUser(UserMap $users, string $name): ?User {\n    return $users->get($name);\n}"
    ]
  },
  {
    "function": [
      "async function processUserAsync(User $user): Awaitable<ProcessResult> {\n    await async_sleep(1);\n    return $user->process();\n}"
    ]
  },
  {
    "function": [
      "function getUserStats(Vector<User> $users): (int, float) {\n    $total = $users->count();\n    if ($total === 0) {\n        return tuple(0, 0.0);\n    }\n    \n    $adultCount = $users->filter($user ==> $user->getAge() >= 18)->count();\n    $averageAge = $users->map($user ==> $user->getAge())->reduce(\n        ($acc, $age) ==> $acc + $age,\n        0\n    ) / $total;\n    \n    return tuple($adultCount, $averageAge);\n}"
    ]
  },
  {
    "function": [
      "$user ==> $user->getAge() >= 18"
    ]
  },
  {
    "function": [
      "$user ==> $user->getAge()"
    ]
  },
  {
    "function": [
      "($acc, $age) ==> $acc + $age"
    ]
  },
  {
    "function": [
      "async function run(): Awaitable<void> {\n    // Create users\n    $user1 = new User(\"John\", 25);\n    $user2 = new User(\"Alice\", 17);\n    \n    $users = new Vector([$user1, $user2]);\n    $userMap = Map {\n        \"John\" => $user1,\n        \"Alice\" => $user2\n    };\n    \n    // Test basic functions\n    echo \"Users:\\n\";\n    foreach ($users as $user) {\n        echo $user->format() . \"\\n\";\n    }\n    \n    // Test processing\n    echo \"\\nProcessing results:\\n\";\n    $results = processUsers($users);\n    foreach ($results as $result) {\n        echo $result['message'] . \"\\n\";\n    }\n    \n    // Test async processing\n    echo \"\\nAsync processing:\\n\";\n    $asyncResult = await processUserAsync($user1);\n    echo \"Async result: \" . $asyncResult['message'] . \"\\n\";\n    \n    // Test user finding\n    echo \"\\nFinding user:\\n\";\n    $foundUser = findUser($userMap, \"John\");\n    if ($foundUser !== null) {\n        echo \"Found: \" . $foundUser->format() . \"\\n\";\n    }\n    \n    // Test statistics\n    list($adultCount, $averageAge) = getUserStats($users);\n    echo \"\\nStats:\\n\";\n    echo \"Adult count: $adultCount\\n\";\n    echo \"Average age: $averageAge\\n\";\n    \n    // Test generic collection\n    echo \"\\nGeneric collection:\\n\";\n    $collection = new UserCollection();\n    $collection->add($user1);\n    $collection->add($user2);\n    foreach ($collection->getUsers() as $user) {\n        echo $user->format(true) . \"\\n\";\n    }\n}"
    ]
  }
]